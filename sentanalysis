import pandas as pd
from sklearn.model_selection import train_test_split

# Load the dataset
data = pd.read_csv('IMDB_Dataset.csv')

# Split the data into features and target
X = data['review']
y = data['sentiment']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


from sklearn.feature_extraction.text import CountVectorizer
from nltk.corpus import stopwords

# Initialize the CountVectorizer
vectorizer = CountVectorizer(stop_words=stopwords.words('english'))

# Fit on the training data and transform both the training and test data
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)


from sklearn.naive_bayes import MultinomialNB

# Initialize the MultinomialNB model
model = MultinomialNB()

# Fit the model on the training data
model.fit(X_train, y_train)
``In the code above, we initialize the Multinomial Naive Bayes model and fit it on the training data.

## Model Evaluation

After training the model, we need to evaluate its performance. For binary classification problems like this one, common evaluation metrics include accuracy, precision, recall, and the F1 score.

```python
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label='positive')
recall = recall_score(y_test, y_pred, pos_label='positive')
f1 = f1_score(y_test, y_pred, pos_label='positive')

# Print the evaluation metrics
print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'F1 Score: {f1:.2f}')


# Get the feature names and class log probabilities
feature_names = vectorizer.get_feature_names()
class_log_probs = model.feature_log_prob_

# Get the most important features for each class
most_important_features = pd.DataFrame({
    'negative': sorted(zip(class_log_probs[0], feature_names), reverse=True)[:10],
    'positive': sorted(zip(class_log_probs[1], feature_names), reverse=True)[:10]
})

print(most_important_features)
